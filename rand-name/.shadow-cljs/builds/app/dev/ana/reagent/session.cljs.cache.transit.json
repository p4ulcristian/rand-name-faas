["^ ","~:output",["^ ","~:js","goog.provide('reagent.session');\ngoog.require('cljs.core');\ngoog.require('reagent.core');\nif((typeof reagent !== 'undefined') && (typeof reagent.session !== 'undefined') && (typeof reagent.session.state !== 'undefined')){\n} else {\nreagent.session.state = reagent.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n}\n/**\n * Returns a cursor from the state atom.\n */\nreagent.session.cursor = (function reagent$session$cursor(ks){\nreturn reagent.core.cursor(reagent.session.state,ks);\n});\n/**\n * Get the key's value from the session, returns nil if it doesn't exist.\n */\nreagent.session.get = (function reagent$session$get(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24206 = arguments.length;\nvar i__4731__auto___24207 = (0);\nwhile(true){\nif((i__4731__auto___24207 < len__4730__auto___24206)){\nargs__4736__auto__.push((arguments[i__4731__auto___24207]));\n\nvar G__24208 = (i__4731__auto___24207 + (1));\ni__4731__auto___24207 = G__24208;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nreagent.session.get.cljs$core$IFn$_invoke$arity$variadic = (function (k,p__24092){\nvar vec__24093 = p__24092;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24093,(0),null);\nvar temp_a = cljs.core.deref(reagent.session.cursor(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [k], null)));\nif((!((temp_a == null)))){\nreturn temp_a;\n} else {\nreturn default$;\n}\n});\n\nreagent.session.get.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nreagent.session.get.cljs$lang$applyTo = (function (seq24085){\nvar G__24086 = cljs.core.first(seq24085);\nvar seq24085__$1 = cljs.core.next(seq24085);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24086,seq24085__$1);\n});\n\nreagent.session.put_BANG_ = (function reagent$session$put_BANG_(k,v){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(reagent.session.state,cljs.core.assoc,k,v);\n});\n/**\n * Gets the value at the path specified by the vector ks from the session,\n *   returns nil if it doesn't exist.\n */\nreagent.session.get_in = (function reagent$session$get_in(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24229 = arguments.length;\nvar i__4731__auto___24231 = (0);\nwhile(true){\nif((i__4731__auto___24231 < len__4730__auto___24229)){\nargs__4736__auto__.push((arguments[i__4731__auto___24231]));\n\nvar G__24233 = (i__4731__auto___24231 + (1));\ni__4731__auto___24231 = G__24233;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nreagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic = (function (ks,p__24120){\nvar vec__24121 = p__24120;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24121,(0),null);\nvar result = cljs.core.deref(reagent.session.cursor(ks));\nif((!((result == null)))){\nreturn result;\n} else {\nreturn default$;\n}\n});\n\nreagent.session.get_in.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nreagent.session.get_in.cljs$lang$applyTo = (function (seq24112){\nvar G__24114 = cljs.core.first(seq24112);\nvar seq24112__$1 = cljs.core.next(seq24112);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24114,seq24112__$1);\n});\n\n/**\n * Replace the current session's value with the result of executing f with\n *   the current value and args.\n */\nreagent.session.swap_BANG_ = (function reagent$session$swap_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24240 = arguments.length;\nvar i__4731__auto___24241 = (0);\nwhile(true){\nif((i__4731__auto___24241 < len__4730__auto___24240)){\nargs__4736__auto__.push((arguments[i__4731__auto___24241]));\n\nvar G__24242 = (i__4731__auto___24241 + (1));\ni__4731__auto___24241 = G__24242;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nreagent.session.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_,reagent.session.state,f,args);\n});\n\nreagent.session.swap_BANG_.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nreagent.session.swap_BANG_.cljs$lang$applyTo = (function (seq24129){\nvar G__24130 = cljs.core.first(seq24129);\nvar seq24129__$1 = cljs.core.next(seq24129);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24130,seq24129__$1);\n});\n\n/**\n * Remove all data from the session and start over cleanly.\n */\nreagent.session.clear_BANG_ = (function reagent$session$clear_BANG_(){\nreturn cljs.core.reset_BANG_(reagent.session.state,cljs.core.PersistentArrayMap.EMPTY);\n});\nreagent.session.reset_BANG_ = (function reagent$session$reset_BANG_(m){\nreturn cljs.core.reset_BANG_(reagent.session.state,m);\n});\n/**\n * Remove a key from the session\n */\nreagent.session.remove_BANG_ = (function reagent$session$remove_BANG_(k){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(reagent.session.state,cljs.core.dissoc,k);\n});\n/**\n * Associates a value in the session, where ks is a\n * sequence of keys and v is the new value and returns\n * a new nested structure. If any levels do not exist,\n * hash-maps will be created.\n */\nreagent.session.assoc_in_BANG_ = (function reagent$session$assoc_in_BANG_(ks,v){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(reagent.session.state,cljs.core.assoc_in,ks,v);\n});\n/**\n * Destructive get from the session. This returns the current value of the key\n *   and then removes it from the session.\n */\nreagent.session.get_BANG_ = (function reagent$session$get_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24252 = arguments.length;\nvar i__4731__auto___24253 = (0);\nwhile(true){\nif((i__4731__auto___24253 < len__4730__auto___24252)){\nargs__4736__auto__.push((arguments[i__4731__auto___24253]));\n\nvar G__24254 = (i__4731__auto___24253 + (1));\ni__4731__auto___24253 = G__24254;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nreagent.session.get_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (k,p__24153){\nvar vec__24154 = p__24153;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24154,(0),null);\nvar cur = reagent.session.get.cljs$core$IFn$_invoke$arity$variadic(k,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([default$], 0));\nreagent.session.remove_BANG_(k);\n\nreturn cur;\n});\n\nreagent.session.get_BANG_.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nreagent.session.get_BANG_.cljs$lang$applyTo = (function (seq24144){\nvar G__24145 = cljs.core.first(seq24144);\nvar seq24144__$1 = cljs.core.next(seq24144);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24145,seq24144__$1);\n});\n\n/**\n * Destructive get from the session. This returns the current value of the path\n *   specified by the vector ks and then removes it from the session.\n */\nreagent.session.get_in_BANG_ = (function reagent$session$get_in_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24260 = arguments.length;\nvar i__4731__auto___24261 = (0);\nwhile(true){\nif((i__4731__auto___24261 < len__4730__auto___24260)){\nargs__4736__auto__.push((arguments[i__4731__auto___24261]));\n\nvar G__24262 = (i__4731__auto___24261 + (1));\ni__4731__auto___24261 = G__24262;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn reagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nreagent.session.get_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ks,p__24174){\nvar vec__24177 = p__24174;\nvar default$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24177,(0),null);\nvar cur = reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic(ks,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([default$], 0));\nreagent.session.assoc_in_BANG_(ks,null);\n\nreturn cur;\n});\n\nreagent.session.get_in_BANG_.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nreagent.session.get_in_BANG_.cljs$lang$applyTo = (function (seq24162){\nvar G__24163 = cljs.core.first(seq24162);\nvar seq24162__$1 = cljs.core.next(seq24162);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24163,seq24162__$1);\n});\n\n/**\n * Updates a value in session where k is a key and f\n * is the function that takes the old value along with any\n * supplied args and return the new value. If key is not\n * present it will be added.\n */\nreagent.session.update_BANG_ = (function reagent$session$update_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24269 = arguments.length;\nvar i__4731__auto___24270 = (0);\nwhile(true){\nif((i__4731__auto___24270 < len__4730__auto___24269)){\nargs__4736__auto__.push((arguments[i__4731__auto___24270]));\n\nvar G__24272 = (i__4731__auto___24270 + (1));\ni__4731__auto___24270 = G__24272;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn reagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nreagent.session.update_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (k,f,args){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(reagent.session.state,(function (p1__24181_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$4(cljs.core.update,p1__24181_SHARP_,k,f),args);\n}));\n});\n\nreagent.session.update_BANG_.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nreagent.session.update_BANG_.cljs$lang$applyTo = (function (seq24182){\nvar G__24183 = cljs.core.first(seq24182);\nvar seq24182__$1 = cljs.core.next(seq24182);\nvar G__24184 = cljs.core.first(seq24182__$1);\nvar seq24182__$2 = cljs.core.next(seq24182__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24183,G__24184,seq24182__$2);\n});\n\n/**\n * Updates a value in the session, where ks is a\n * sequence of keys and f is a function that will\n * take the old value along with any supplied args and return\n * the new value. If any levels do not exist, hash-maps\n * will be created.\n */\nreagent.session.update_in_BANG_ = (function reagent$session$update_in_BANG_(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24278 = arguments.length;\nvar i__4731__auto___24279 = (0);\nwhile(true){\nif((i__4731__auto___24279 < len__4730__auto___24278)){\nargs__4736__auto__.push((arguments[i__4731__auto___24279]));\n\nvar G__24282 = (i__4731__auto___24279 + (1));\ni__4731__auto___24279 = G__24282;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn reagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nreagent.session.update_in_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (ks,f,args){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(reagent.session.state,(function (p1__24195_SHARP_){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.partial.cljs$core$IFn$_invoke$arity$4(cljs.core.update_in,p1__24195_SHARP_,ks,f),args);\n}));\n});\n\nreagent.session.update_in_BANG_.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nreagent.session.update_in_BANG_.cljs$lang$applyTo = (function (seq24196){\nvar G__24197 = cljs.core.first(seq24196);\nvar seq24196__$1 = cljs.core.next(seq24196);\nvar G__24198 = cljs.core.first(seq24196__$1);\nvar seq24196__$2 = cljs.core.next(seq24196__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__24197,G__24198,seq24196__$2);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","reagent/session.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",20],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$get","~$reset!","~$swap!","~$get-in"]],"~:name","~$reagent.session","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$reagent.core","^O","~$reagent","^O","~$cljs.core","^Q","~$goog","^R"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$atom","^O"],"~:require-macros",["^ ","^Q","^Q","^O","^O","^P","^O"],"~:form",["~#list",["~$ns","^J",["^Y",["~:refer-clojure","~:exclude",["^E","^H","^F","^G"]]],["^Y",["^T",["^O","~:as","^P","~:refer",["^V"]]]]]],"~:flags",["^ ","^T",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^R","^Q","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","reagent/session.cljs"],"~:compiled-at",1582904388703,"~:resource-name","reagent/session.cljs","~:warnings",[],"~:source","(ns reagent.session\n  (:refer-clojure :exclude [get get-in reset! swap!])\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(defonce state (atom {}))\n\n(defn cursor\n  \"Returns a cursor from the state atom.\"\n  [ks]\n  (reagent/cursor state ks))\n\n(defn get\n  \"Get the key's value from the session, returns nil if it doesn't exist.\"\n  [k & [default]]\n  (let [temp-a @(cursor [k])]\n    (if-not (nil? temp-a) temp-a default)))\n\n(defn put! [k v]\n  (clojure.core/swap! state assoc k v))\n\n(defn get-in\n \"Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.\"\n  [ks & [default]]\n  (let [result @(cursor ks)]\n    (if-not (nil? result) result default)))\n\n(defn swap!\n  \"Replace the current session's value with the result of executing f with\n  the current value and args.\"\n  [f & args]\n  (apply clojure.core/swap! state f args))\n\n(defn clear!\n  \"Remove all data from the session and start over cleanly.\"\n  []\n  (clojure.core/reset! state {}))\n\n(defn reset! [m]\n  (clojure.core/reset! state m))\n\n(defn remove!\n  \"Remove a key from the session\"\n  [k]\n  (clojure.core/swap! state dissoc k))\n\n(defn assoc-in!\n  \"Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.\"\n  [ks v]\n  (clojure.core/swap! state assoc-in  ks v))\n\n(defn get!\n  \"Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.\"[k & [default]]\n  (let [cur (get k default)]\n    (remove! k)\n    cur))\n\n(defn get-in!\n  \"Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.\"\n  [ks & [default]]\n    (let [cur (get-in ks default)]\n      (assoc-in! ks nil)\n      cur))\n\n(defn update!\n  \"Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.\"\n  [k f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update % k f) args)))\n\n(defn update-in!\n  \"Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.\"\n  [ks f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update-in % ks f) args)))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["js/reagent","js/reagent.session","js/reagent.session.state","reagent.session/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.session/cursor","ks","reagent.core/cursor","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","reagent.session/get","p__24092","vec__24093","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq24085","G__24086","cljs.core/first","cljs.core/next","self__4717__auto__","k","default","cljs.core/deref","temp-a","reagent.session/put!","v","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.session/get-in","p__24120","vec__24121","seq24112","G__24114","result","reagent.session/swap!","seq24129","G__24130","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/swap!","reagent.session/clear!","cljs.core/reset!","reagent.session/reset!","m","reagent.session/remove!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","reagent.session/assoc-in!","cljs.core/assoc-in","reagent.session/get!","p__24153","vec__24154","seq24144","G__24145","cur","reagent.session.get.cljs$core$IFn$_invoke$arity$variadic","reagent.session/get-in!","p__24174","vec__24177","seq24162","G__24163","reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic","reagent.session/update!","seq24182","G__24183","G__24184","p1__24181#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","cljs.core/update","reagent.session/update-in!","seq24196","G__24197","G__24198","p1__24195#","cljs.core/update-in"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1580140326000,1580140326000,499162500000,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^D",[]],"~:deps-syms",["~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"]]],["^17","reagent/impl/batching.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","~$reagent.debug","~$reagent.impl.util"]]],["^17","goog/math/math.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.array","~$goog.asserts"]]],["^17","goog/array/array.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O"]]],["^1D","node_modules/prop-types/checkPropTypes.js"],[1580140326000,1580140326000,1549836454000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^17","reagent/impl/util.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^1L","~$clojure.string"]]],["^17","goog/debug/error.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/dom/nodetype.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/cjs/scheduler.development.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","reagent/ratom.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^1M","^1L","~$reagent.impl.batching","~$clojure.set","~$goog.object"]]],["^1D","node_modules/scheduler/cjs/scheduler.production.min.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^1D","node_modules/react/index.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^17","shadow/js.js"],[1580140326000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/object/object.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/impl/template.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^?","^1Q","~$clojure.walk","^1M","~$reagent.impl.component","^1R","~$reagent.ratom","^1L","^1T"]]],["^1D","node_modules/react-dom/cjs/react-dom.production.min.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^?","~$module$node_modules$object_assign$index","~$module$node_modules$scheduler$index"]]],"~:SHADOW-TIMESTAMP",[1580140326000,1580140308000],["^1D","node_modules/react/cjs/react.development.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^1Z","~$module$node_modules$prop_types$checkPropTypes"]]],["^17","goog/math/long.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1O","~$goog.reflect"]]],["^17","goog/string/internal.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","goog/functions/functions.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/impl/component.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^1T","^?","^1M","^1R","^1Y","^1L"]]],["^17","clojure/walk.cljs"],[1580140308000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/structs/map.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1D","node_modules/scheduler/index.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"]]],["^17","goog/asserts/asserts.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^17","goog/uri/uri.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1N","^1O","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1D","node_modules/object-assign/index.js"],[1580140326000,1580140326000,1484580833000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","goog/base.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",[]]],["^17","goog/structs/structs.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1N","^1T"]]],["^17","clojure/string.cljs"],[1580140308000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^29","~$goog.string.StringBuffer"]]],["^1D","node_modules/react/cjs/react.production.min.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^1Z"]]],["^17","goog/string/string.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","~$goog.string.internal"]]],["^17","goog/reflect/reflect.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","reagent/core.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^?","~$reagent.impl.template","^1X","^1M","^1R","^1Y","^1L","~$reagent.dom"]]],["^17","reagent/session.cljs"],[1580140318000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^O"]]],["^17","goog/string/stringbuffer.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^17","goog/iter/iter.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1N","^1O","~$goog.functions","~$goog.math"]]],["^17","reagent/dom.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q","^A","^1M","^2A","^1R","^1Y","^1L"]]],["^1D","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1580140326000,1580140326000,1549571078000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I"]]],["^17","cljs/core.cljs"],[1580140308000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["~$goog.math.Long","~$goog.math.Integer","^29","^1T","^1N","~$goog.Uri","^2?"]]],["^17","reagent/debug.cljs"],[1582903546000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/math/integer.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R"]]],["^1D","node_modules/scheduler/tracing.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"]]],["^1D","node_modules/react-dom/cjs/react-dom.development.js"],[1580140326000,1580140326000,499162500000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^1I","^?","^1Z","^21","^1[","~$module$node_modules$scheduler$tracing"]]],["^17","clojure/set.cljs"],[1580140308000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^Q"]]],["^17","goog/uri/utils.js"],[1580140315000,"^1E",["^ ","^1F",null,"^1G",["^D",[]],"^1H",["^R","^1N","^1O","^29"]]]]],"~:clj-info",["^ ","jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/util.cljc",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1580140301000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map.clj",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/core.cljc",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/compiler.cljc",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/inspect.clj",1580663345000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/js_deps.cljc",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1580140301000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1580140301000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/env.cljc",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1580140307000,"jar:file:/Users/paulcristianmartin/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/ratom.clj",1582903546000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/tagged_literals.cljc",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1580140301000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader.clj",1580663345000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/reader_types.clj",1580663345000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/impl/errors.clj",1580663345000,"jar:file:/Users/paulcristianmartin/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/core.clj",1582903546000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64.clj",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/source_map/base64_vlq.clj",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/tools.reader/1.3.0/tools.reader-1.3.0.jar!/clojure/tools/reader/default_data_readers.clj",1580663345000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1580140301000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/externs.clj",1580140308000,"jar:file:/Users/paulcristianmartin/.m2/repository/reagent/reagent/0.9.1/reagent-0.9.1.jar!/reagent/debug.clj",1582903546000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1580140301000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1580140301000,"jar:file:/Users/paulcristianmartin/.m2/repository/org/clojure/clojurescript/1.10.520/clojurescript-1.10.520.jar!/cljs/analyzer.cljc",1580140308000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","reagent/session.cljs","^7",1,"^8",5,"^9",1,"^:",20],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",["^E","^F","^G","^H"]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^O","^Q","^Q","^R","^R"],"^S",["^D",["^T"]],"^U",["^ ","^V","^O"],"~:defs",["^ ","~$assoc-in!",["^ ","~:protocol-inline",null,"^5",["^ ","^6","reagent/session.cljs","^7",47,"^8",7,"^9",47,"^:",16,"~:arglists",["^Y",["~$quote",["^Y",[["~$ks","~$v"]]]]],"~:doc","Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."],"^I","~$reagent.session/assoc-in!","^6","reagent/session.cljs","^:",16,"~:method-params",["^Y",[["^3A","~$v"]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^8",1,"~:variadic?",false,"^7",47,"~:ret-tag",["^D",[null,"~$any"]],"^9",47,"~:max-fixed-arity",2,"~:fn-var",true,"^3?",["^Y",["^3@",["^Y",[["^3A","~$v"]]]]],"^3B","Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created."],"~$remove!",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",42,"^8",7,"^9",42,"^:",14,"^3?",["^Y",["^3@",["^Y",[["~$k"]]]]],"^3B","Remove a key from the session"],"^I","~$reagent.session/remove!","^6","reagent/session.cljs","^:",14,"^3D",["^Y",[["~$k"]]],"^3E",null,"^3F",["^Y",[null,null]],"^8",1,"^3G",false,"^7",42,"^3H",["^D",[null,"^3I"]],"^9",42,"^3J",1,"^3K",true,"^3?",["^Y",["^3@",["^Y",[["~$k"]]]]],"^3B","Remove a key from the session"],"~$update-in!",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",80,"^8",7,"^9",80,"^:",17,"^3?",["^Y",["^3@",["^Y",[["^3A","~$f","~$&","~$args"]]]]],"^3B","Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.","~:top-fn",["^ ","^3G",true,"~:fixed-arity",2,"^3J",2,"^3D",[["^Y",["^3A","~$f","^3O"]]],"^3?",["^Y",[["^3A","~$f","~$&","^3O"]]],"^3F",["^Y",[null]]]],"^I","~$reagent.session/update-in!","^6","reagent/session.cljs","^:",17,"^3P",["^ ","^3G",true,"^3Q",2,"^3J",2,"^3D",[["^Y",["^3A","~$f","^3O"]]],"^3?",["^Y",[["^3A","~$f","~$&","^3O"]]],"^3F",["^Y",[null]]],"^3D",[["^Y",["^3A","~$f","^3O"]]],"^3E",null,"^3Q",2,"^3F",["^Y",[null]],"^8",1,"^3G",true,"~:methods",[["^ ","^3Q",2,"^3G",true,"~:tag",["^D",[null,"^3I"]]]],"^7",80,"^3H","^3I","^9",80,"^3J",2,"^3K",true,"^3?",["^Y",[["^3A","~$f","~$&","^3O"]]],"^3B","Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created."],"~$get-in!",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",62,"^8",7,"^9",62,"^:",14,"^3?",["^Y",["^3@",["^Y",[["^3A","~$&",["~$default"]]]]]],"^3B","Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.","^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["^3A",["^3V"]]]],"^3?",["^Y",[["^3A","~$&",["^3V"]]]],"^3F",["^Y",[null]]]],"^I","~$reagent.session/get-in!","^6","reagent/session.cljs","^:",14,"^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["^3A",["^3V"]]]],"^3?",["^Y",[["^3A","~$&",["^3V"]]]],"^3F",["^Y",[null]]],"^3D",[["^Y",["^3A",["^3V"]]]],"^3E",null,"^3Q",1,"^3F",["^Y",[null]],"^8",1,"^3G",true,"^3S",[["^ ","^3Q",1,"^3G",true,"^3T",["^D",[null,"^3I","~$clj-nil"]]]],"^7",62,"^3H","^3I","^9",62,"^3J",1,"^3K",true,"^3?",["^Y",[["^3A","~$&",["^3V"]]]],"^3B","Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session."],"^E",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",12,"^8",7,"^9",12,"^:",10,"^3?",["^Y",["^3@",["^Y",[["~$k","~$&",["^3V"]]]]]],"^3B","Get the key's value from the session, returns nil if it doesn't exist.","^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["~$k",["^3V"]]]],"^3?",["^Y",[["~$k","~$&",["^3V"]]]],"^3F",["^Y",[null]]]],"^I","~$reagent.session/get","^6","reagent/session.cljs","^:",10,"^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["~$k",["^3V"]]]],"^3?",["^Y",[["~$k","~$&",["^3V"]]]],"^3F",["^Y",[null]]],"^3D",[["^Y",["~$k",["^3V"]]]],"^3E",null,"^3Q",1,"^3F",["^Y",[null]],"^8",1,"^3G",true,"^3S",[["^ ","^3Q",1,"^3G",true,"^3T",["^D",[null,"^3I","^3X"]]]],"^7",12,"^3H","^3I","^9",12,"^3J",1,"^3K",true,"^3?",["^Y",[["~$k","~$&",["^3V"]]]],"^3B","Get the key's value from the session, returns nil if it doesn't exist."],"^F",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",39,"^8",7,"^9",39,"^:",13,"^3?",["^Y",["^3@",["^Y",[["~$m"]]]]]],"^I","~$reagent.session/reset!","^6","reagent/session.cljs","^:",13,"^3D",["^Y",[["~$m"]]],"^3E",null,"^3F",["^Y",[null,null]],"^8",1,"^3G",false,"^7",39,"^3H",["^D",[null,"^3I"]],"^9",39,"^3J",1,"^3K",true,"^3?",["^Y",["^3@",["^Y",[["~$m"]]]]]],"~$cursor",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",7,"^8",7,"^9",7,"^:",13,"^3?",["^Y",["^3@",["^Y",[["^3A"]]]]],"^3B","Returns a cursor from the state atom."],"^I","~$reagent.session/cursor","^6","reagent/session.cljs","^:",13,"^3D",["^Y",[["^3A"]]],"^3E",null,"^3F",["^Y",[null,null]],"^8",1,"^3G",false,"^7",7,"^3H","~$reagent.ratom/RCursor","^9",7,"^3J",1,"^3K",true,"^3?",["^Y",["^3@",["^Y",[["^3A"]]]]],"^3B","Returns a cursor from the state atom."],"~$get!",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",55,"^8",7,"^9",55,"^:",11,"^3?",["^Y",["^3@",["^Y",[["~$k","~$&",["^3V"]]]]]],"^3B","Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.","^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["~$k",["^3V"]]]],"^3?",["^Y",[["~$k","~$&",["^3V"]]]],"^3F",["^Y",[null]]]],"^I","~$reagent.session/get!","^6","reagent/session.cljs","^:",11,"^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["~$k",["^3V"]]]],"^3?",["^Y",[["~$k","~$&",["^3V"]]]],"^3F",["^Y",[null]]],"^3D",[["^Y",["~$k",["^3V"]]]],"^3E",null,"^3Q",1,"^3F",["^Y",[null]],"^8",1,"^3G",true,"^3S",[["^ ","^3Q",1,"^3G",true,"^3T",["^D",[null,"^3I","^3X"]]]],"^7",55,"^3H","^3I","^9",55,"^3J",1,"^3K",true,"^3?",["^Y",[["~$k","~$&",["^3V"]]]],"^3B","Destructive get from the session. This returns the current value of the key\n  and then removes it from the session."],"~$state",["^ ","^I","~$reagent.session/state","^6","reagent/session.cljs","^7",5,"^8",1,"^9",5,"^:",15,"^5",["^ ","^6","reagent/session.cljs","^7",5,"^8",10,"^9",5,"^:",15],"^3T","~$reagent.ratom/RAtom"],"^G",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",28,"^8",7,"^9",28,"^:",12,"^3?",["^Y",["^3@",["^Y",[["~$f","~$&","^3O"]]]]],"^3B","Replace the current session's value with the result of executing f with\n  the current value and args.","^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["~$f","^3O"]]],"^3?",["^Y",[["~$f","~$&","^3O"]]],"^3F",["^Y",[null]]]],"^I","~$reagent.session/swap!","^6","reagent/session.cljs","^:",12,"^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["~$f","^3O"]]],"^3?",["^Y",[["~$f","~$&","^3O"]]],"^3F",["^Y",[null]]],"^3D",[["^Y",["~$f","^3O"]]],"^3E",null,"^3Q",1,"^3F",["^Y",[null]],"^8",1,"^3G",true,"^3S",[["^ ","^3Q",1,"^3G",true,"^3T","^3I"]],"^7",28,"^3H","^3I","^9",28,"^3J",1,"^3K",true,"^3?",["^Y",[["~$f","~$&","^3O"]]],"^3B","Replace the current session's value with the result of executing f with\n  the current value and args."],"~$clear!",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",34,"^8",7,"^9",34,"^:",13,"^3?",["^Y",["^3@",["^Y",[[]]]]],"^3B","Remove all data from the session and start over cleanly."],"^I","~$reagent.session/clear!","^6","reagent/session.cljs","^:",13,"^3D",["^Y",[[]]],"^3E",null,"^3F",["^Y",[null,null]],"^8",1,"^3G",false,"^7",34,"^3H",["^D",[null,"^3I"]],"^9",34,"^3J",0,"^3K",true,"^3?",["^Y",["^3@",["^Y",[[]]]]],"^3B","Remove all data from the session and start over cleanly."],"~$update!",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",70,"^8",7,"^9",70,"^:",14,"^3?",["^Y",["^3@",["^Y",[["~$k","~$f","~$&","^3O"]]]]],"^3B","Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.","^3P",["^ ","^3G",true,"^3Q",2,"^3J",2,"^3D",[["^Y",["~$k","~$f","^3O"]]],"^3?",["^Y",[["~$k","~$f","~$&","^3O"]]],"^3F",["^Y",[null]]]],"^I","~$reagent.session/update!","^6","reagent/session.cljs","^:",14,"^3P",["^ ","^3G",true,"^3Q",2,"^3J",2,"^3D",[["^Y",["~$k","~$f","^3O"]]],"^3?",["^Y",[["~$k","~$f","~$&","^3O"]]],"^3F",["^Y",[null]]],"^3D",[["^Y",["~$k","~$f","^3O"]]],"^3E",null,"^3Q",2,"^3F",["^Y",[null]],"^8",1,"^3G",true,"^3S",[["^ ","^3Q",2,"^3G",true,"^3T",["^D",[null,"^3I"]]]],"^7",70,"^3H","^3I","^9",70,"^3J",2,"^3K",true,"^3?",["^Y",[["~$k","~$f","~$&","^3O"]]],"^3B","Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added."],"~$put!",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",18,"^8",7,"^9",18,"^:",11,"^3?",["^Y",["^3@",["^Y",[["~$k","~$v"]]]]]],"^I","~$reagent.session/put!","^6","reagent/session.cljs","^:",11,"^3D",["^Y",[["~$k","~$v"]]],"^3E",null,"^3F",["^Y",[null,null]],"^8",1,"^3G",false,"^7",18,"^3H",["^D",[null,"^3I"]],"^9",18,"^3J",2,"^3K",true,"^3?",["^Y",["^3@",["^Y",[["~$k","~$v"]]]]]],"^H",["^ ","^3>",null,"^5",["^ ","^6","reagent/session.cljs","^7",21,"^8",7,"^9",21,"^:",13,"^3?",["^Y",["^3@",["^Y",[["^3A","~$&",["^3V"]]]]]],"^3B","Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.","^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["^3A",["^3V"]]]],"^3?",["^Y",[["^3A","~$&",["^3V"]]]],"^3F",["^Y",[null]]]],"^I","~$reagent.session/get-in","^6","reagent/session.cljs","^:",13,"^3P",["^ ","^3G",true,"^3Q",1,"^3J",1,"^3D",[["^Y",["^3A",["^3V"]]]],"^3?",["^Y",[["^3A","~$&",["^3V"]]]],"^3F",["^Y",[null]]],"^3D",[["^Y",["^3A",["^3V"]]]],"^3E",null,"^3Q",1,"^3F",["^Y",[null]],"^8",1,"^3G",true,"^3S",[["^ ","^3Q",1,"^3G",true,"^3T",["^D",[null,"^3I","^3X"]]]],"^7",21,"^3H","^3I","^9",21,"^3J",1,"^3K",true,"^3?",["^Y",[["^3A","~$&",["^3V"]]]],"^3B","Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist."]],"^W",["^ ","^Q","^Q","^O","^O","^P","^O"],"^13",["^ ","^T",["^D",[]]],"^14",["^ "],"^15",["^R","^Q","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^D",[]],"~:compiler-options",["^1C",[["^4A","~:static-fns"],true,["^4A","~:shadow-tweaks"],null,["^4A","~:elide-asserts"],false,["^4A","~:optimize-constants"],null,["^4A","^1:"],null,["^4A","~:external-config"],null,["^4A","~:tooling-config"],null,["^4A","~:emit-constants"],null,["^4A","~:load-tests"],null,["^4A","~:form-size-threshold"],null,["^4A","~:infer-externs"],true,["^4A","^1<"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4A","~:fn-invoke-direct"],null,["^4A","~:source-map"],"/dev/null"]]]