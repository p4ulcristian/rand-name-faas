{"version":3,"sources":["reagent/session.cljs"],"mappings":"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","names":["js/reagent","js/reagent.session","js/reagent.session.state","reagent.session/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.session/cursor","ks","reagent.core/cursor","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","reagent.session/get","p__24092","vec__24093","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq24085","G__24086","cljs.core/first","cljs.core/next","self__4717__auto__","k","default","cljs.core/deref","temp-a","reagent.session/put!","v","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","reagent.session/get-in","p__24120","vec__24121","seq24112","G__24114","result","reagent.session/swap!","seq24129","G__24130","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/swap!","reagent.session/clear!","cljs.core/reset!","reagent.session/reset!","m","reagent.session/remove!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","reagent.session/assoc-in!","cljs.core/assoc-in","reagent.session/get!","p__24153","vec__24154","seq24144","G__24145","cur","reagent.session.get.cljs$core$IFn$_invoke$arity$variadic","reagent.session/get-in!","p__24174","vec__24177","seq24162","G__24163","reagent.session.get_in.cljs$core$IFn$_invoke$arity$variadic","reagent.session/update!","seq24182","G__24183","G__24184","p1__24181#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$4","cljs.core/update","reagent.session/update-in!","seq24196","G__24197","G__24198","p1__24195#","cljs.core/update-in"],"sourcesContent":["(ns reagent.session\n  (:refer-clojure :exclude [get get-in reset! swap!])\n  (:require [reagent.core :as reagent :refer [atom]]))\n\n(defonce state (atom {}))\n\n(defn cursor\n  \"Returns a cursor from the state atom.\"\n  [ks]\n  (reagent/cursor state ks))\n\n(defn get\n  \"Get the key's value from the session, returns nil if it doesn't exist.\"\n  [k & [default]]\n  (let [temp-a @(cursor [k])]\n    (if-not (nil? temp-a) temp-a default)))\n\n(defn put! [k v]\n  (clojure.core/swap! state assoc k v))\n\n(defn get-in\n \"Gets the value at the path specified by the vector ks from the session,\n  returns nil if it doesn't exist.\"\n  [ks & [default]]\n  (let [result @(cursor ks)]\n    (if-not (nil? result) result default)))\n\n(defn swap!\n  \"Replace the current session's value with the result of executing f with\n  the current value and args.\"\n  [f & args]\n  (apply clojure.core/swap! state f args))\n\n(defn clear!\n  \"Remove all data from the session and start over cleanly.\"\n  []\n  (clojure.core/reset! state {}))\n\n(defn reset! [m]\n  (clojure.core/reset! state m))\n\n(defn remove!\n  \"Remove a key from the session\"\n  [k]\n  (clojure.core/swap! state dissoc k))\n\n(defn assoc-in!\n  \"Associates a value in the session, where ks is a\n   sequence of keys and v is the new value and returns\n   a new nested structure. If any levels do not exist,\n   hash-maps will be created.\"\n  [ks v]\n  (clojure.core/swap! state assoc-in  ks v))\n\n(defn get!\n  \"Destructive get from the session. This returns the current value of the key\n  and then removes it from the session.\"[k & [default]]\n  (let [cur (get k default)]\n    (remove! k)\n    cur))\n\n(defn get-in!\n  \"Destructive get from the session. This returns the current value of the path\n  specified by the vector ks and then removes it from the session.\"\n  [ks & [default]]\n    (let [cur (get-in ks default)]\n      (assoc-in! ks nil)\n      cur))\n\n(defn update!\n  \"Updates a value in session where k is a key and f\n   is the function that takes the old value along with any\n   supplied args and return the new value. If key is not\n   present it will be added.\"\n  [k f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update % k f) args)))\n\n(defn update-in!\n  \"Updates a value in the session, where ks is a\n   sequence of keys and f is a function that will\n   take the old value along with any supplied args and return\n   the new value. If any levels do not exist, hash-maps\n   will be created.\"\n  [ks f & args]\n  (clojure.core/swap!\n    state\n    #(apply (partial update-in % ks f) args)))\n"]}